// LoginView.swift

import SwiftUI

// MARK: - Models
struct LoginRequest: Codable {
    let email: String
    let password: String
}

struct LoginResponse: Codable {
    let authToken: String
    let userId: String
}

// MARK: - ViewModel
class LoginViewModel: ObservableObject {
    @Published var emailOrPhone = ""
    @Published var password = ""
    @Published var errorMessage: String?
    @Published var isLoading = false
    
    func login() {
       
        guard let url = URL(string: "https://api.example.com/v1/login") else { return }
        
        self.isLoading = true
        self.errorMessage = nil
        
        let body = LoginRequest(email: emailOrPhone, password: password)
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONEncoder().encode(body)
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                self.isLoading = false
                guard let data = data, error == nil else {
                    self.errorMessage = "Network error. Please try again."
                    return
                }
                
                if let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 {
                    // Successful login
                    print("âœ… Login successful!")
                    // Handle successful response (e.g., save token, navigate to home)
                } else {
                    // Invalid credentials or other server error
                    self.errorMessage = "Invalid credentials. Please check your email and password."
                }
            }
        }.resume()
    }
}

// MARK: - View
struct LoginView: View {
    @StateObject private var viewModel = LoginViewModel()
    
    var body: some View {
        ZStack {
            LinearGradient(
                gradient: Gradient(colors: [Color.blue.opacity(0.4), Color.black]),
                startPoint: .top,
                endPoint: .bottom
            )
            .edgesIgnoringSafeArea(.all)
            
            VStack(spacing: 20) {
                Text("ReChord")
                    .font(.largeTitle).fontWeight(.bold).foregroundColor(.white)
                    .padding(.bottom, 40)
                
                TextField("enter your email or phone number", text: $viewModel.emailOrPhone)
                    .padding().background(Color.white.opacity(0.8)).cornerRadius(10)
                    .keyboardType(.emailAddress).autocapitalization(.none)

                SecureField("Please enter your Password", text: $viewModel.password)
                    .padding().background(Color.white.opacity(0.8)).cornerRadius(10)
                
                if let errorMessage = viewModel.errorMessage {
                    Text(errorMessage)
                        .foregroundColor(.red).font(.caption).multilineTextAlignment(.center)
                }
                
                Button(action: viewModel.login) {
                    HStack {
                        if viewModel.isLoading {
                            ProgressView().progressViewStyle(CircularProgressViewStyle(tint: .white))
                        } else {
                            Text("Continue")
                        }
                    }.frame(maxWidth: .infinity).padding().foregroundColor(.white)
                     .background(Color.blue).cornerRadius(10)
                }.disabled(viewModel.isLoading)
                
                Text("or").foregroundColor(.white.opacity(0.7))
                
                // Social Logins (placeholders)
                Button(action: {}) { Text("Continue with Google") }
                    .frame(maxWidth: .infinity).padding().foregroundColor(.black)
                    .background(Color.white).cornerRadius(10)
                
                Button(action: {}) { Text("Continue with Apple") }
                    .frame(maxWidth: .infinity).padding().foregroundColor(.white)
                    .background(Color.black).cornerRadius(10)
                
                Spacer()
                
                HStack {
                    NavigationLink {
                        RegistrationView()
                    } label: {
                        Text("Don't have an account? create an account")
                    }
                    Spacer()
                    Button("Forget your password?") {}
                }
                .font(.footnote)
                .foregroundColor(.white)
            }
            .padding(30)
            .navigationTitle("")
            .toolbar(.hidden, for: .navigationBar)
        }
    }
}
